/*
    Copyright (c) 2005, 2006, 2007, 2008, 2011, 2012 Paul Richards <paul.richards@gmail.com>

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted, provided that the above
    copyright notice and this permission notice appear in all copies.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

package pigeon.view;

import java.awt.Component;
import java.util.Collection;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import pigeon.model.Clock;
import pigeon.model.Member;
import pigeon.model.Race;
import pigeon.model.Season;
import pigeon.model.ValidationException;

/**
    Lists the clocks for a given race.

    Lets the user add more clocks or go on to edit the times
    associated with one of the clocks (using ClockEditor).
 */
final class RaceEditor extends javax.swing.JPanel {

    private static final long serialVersionUID = 2521382654389072851L;

    private Race race;
    private Season season;
    private final Collection<Member> members;
    private final Configuration configuration;

    private RaceEditor(Race race, Season season, Configuration configuration) {
        this.race = race;
        this.members = season.getOrganization().getMembers();
        this.season = season;
        this.configuration = configuration;
        initComponents();
        clocksTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            @Override
            public void valueChanged(ListSelectionEvent e) {
                refreshButtons();
            }
        });
        reloadClocksTable();
        ((TitledBorder)jPanel1.getBorder()).setTitle("Clocks for " + race.toString());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clocksTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        addClockButton = new javax.swing.JButton();
        editClockButton = new javax.swing.JButton();
        deleteClockButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Clocks"));
        jScrollPane1.setViewportView(clocksTable);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        addClockButton.setText("Add Clock");
        addClockButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                addClockButtonActionPerformed(evt);
            }
        });

        jPanel2.add(addClockButton);

        editClockButton.setText("Edit Clock");
        editClockButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                editClockButtonActionPerformed(evt);
            }
        });

        jPanel2.add(editClockButton);

        deleteClockButton.setText("Delete Clock");
        deleteClockButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteClockButtonActionPerformed(evt);
            }
        });

        jPanel2.add(deleteClockButton);

        jPanel1.add(jPanel2, java.awt.BorderLayout.SOUTH);

        jLabel1.setText("Add member clocks to the race below.");
        jPanel1.add(jLabel1, java.awt.BorderLayout.NORTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void deleteClockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteClockButtonActionPerformed
        int index = clocksTable.getSelectedRow();
        Clock clock = race.getClocks().get(index);
        try {
            race = race.repRemoveClock(clock);
        } catch (ValidationException e) {
            e.displayErrorDialog(this);
        }
        reloadClocksTable();
    }//GEN-LAST:event_deleteClockButtonActionPerformed

    private void editClockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editClockButtonActionPerformed
        try {
            int index = clocksTable.getSelectedRow();
            Clock clock = race.getClocks().get(index);
            race = race.repReplaceClock(clock, editResultsForClock(ClockSummary.editClock(this, clock, members)));
        } catch (UserCancelledException e) {
        } catch (ValidationException e) {
            e.displayErrorDialog(this);
        }
        reloadClocksTable();
    }//GEN-LAST:event_editClockButtonActionPerformed

    private Clock editResultsForClock(Clock clock) throws UserCancelledException
    {
        return ClockEditor.editClockResults(this, clock, race.getDaysCovered(), season, configuration);
    }

    private Date medianClockDate00(Utilities.Func1<Date, Clock> func)
    {
        return Utilities.median00(Utilities.map(race.getClocks(), func));
    }

    private Date medianMasterSet00()
    {
        return medianClockDate00(new Utilities.Func1<Date, Clock>() {
            @Override
            public Date call(Clock arg) {
                return arg.getTimeOnMasterWhenSet();
            }
      });
    }
    private Date medianMasterOpen00()
    {
        return medianClockDate00(new Utilities.Func1<Date, Clock>() {
            @Override
            public Date call(Clock arg) {
                return arg.getTimeOnMasterWhenOpened();
            }
      });
    }
    private Date medianMemberSet00()
    {
        return medianClockDate00(new Utilities.Func1<Date, Clock>() {
            @Override
            public Date call(Clock arg) {
                return arg.getTimeOnMemberWhenSet();
            }
      });
    }
    private Date medianMemberOpen00()
    {
        return medianClockDate00(new Utilities.Func1<Date, Clock>() {
            @Override
            public Date call(Clock arg) {
                return arg.getTimeOnMemberWhenOpened();
            }
      });
    }

    private void addClockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addClockButtonActionPerformed
        try {
            race = race.repAddClock(editResultsForClock(ClockSummary.createClock(
                    this,
                    members,
                    medianMasterSet00(),
                    medianMasterOpen00(),
                    medianMemberSet00(),
                    medianMemberOpen00()
                )));
        } catch (UserCancelledException ex) {
        } catch (ValidationException e) {
            e.displayErrorDialog(this);
        }
        reloadClocksTable();
    }//GEN-LAST:event_addClockButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addClockButton;
    private javax.swing.JTable clocksTable;
    private javax.swing.JButton deleteClockButton;
    private javax.swing.JButton editClockButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    static Race editRaceResults(Component parent, Race race, Season season, Configuration configuration) {
        RaceEditor panel = new RaceEditor(race, season, configuration);
        Object[] options = {"Ok"};
        int result = JOptionPane.showOptionDialog(parent, panel, "Clocks", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        return panel.race;
    }

    private void reloadClocksTable() {
        clocksTable.setModel(new ClocksTableModel(race.getClocks()));
        clocksTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        refreshButtons();
    }

    private void refreshButtons()
    {
        deleteClockButton.setEnabled( clocksTable.getSelectedRow() != -1 );
        editClockButton.setEnabled( clocksTable.getSelectedRow() != -1 );
    }
}
