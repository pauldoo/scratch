/*
    Copyright (c) 2005, 2006, 2007, 2012 Paul Richards <paul.richards@gmail.com>

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted, provided that the above
    copyright notice and this permission notice appear in all copies.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

package pigeon.view;

import java.text.DateFormat;
import java.text.ParseException;
import java.util.Date;
import javax.swing.JFormattedTextField;
import javax.swing.text.DateFormatter;
import javax.swing.text.DefaultFormatter;
import javax.swing.text.DefaultFormatterFactory;
import pigeon.model.Constants;

/**
    This is a Swing GUI component which is for entering dates and times.

    It wraps up the DateFormatter stuff.
*/
public final class DateTimeComponent extends javax.swing.JPanel
{
    private static final long serialVersionUID = 5961795005357652678L;

    private DateTimeDisplayMode mode;

    /** Creates new form DateTimeComponent */
    public DateTimeComponent()
    {
        initComponents();
        textField.addFocusListener(new BeepingFocusListener());
        setMode(DateTimeDisplayMode.DATE_HOURS_MINUTES_SECONDS);
    }

    @Override
    public void setEnabled(boolean enabled)
    {
        super.setEnabled(enabled);
        textField.setEnabled(enabled);
    }

    public DateTimeDisplayMode getMode()
    {
        return mode;
    }

    /**
        Returns 'getMode().getFormat().toPattern()'.

        This allows the GUI to display error messages to the user which
        show the expected input format.
    */
    public String getFormatPattern()
    {
        return getMode().getFormat().toPattern();
    }

    private static final class CustomLenientDateFormatter extends DateFormatter
    {
        private static final long serialVersionUID = 5671072382131624190L;

        public CustomLenientDateFormatter(DateFormat df) {
            super(df);
        }

        @Override
        public Object stringToValue(String string) throws ParseException {
            return super.stringToValue(string.trim().replace('-', ':'));
        }
    }

    public void setMode(DateTimeDisplayMode mode)
    {
        this.mode = mode;
        DateFormatter dateFormatter = new CustomLenientDateFormatter(mode.getFormat());
        dateFormatter.setOverwriteMode(true);
        textField.setFormatterFactory(new DefaultFormatterFactory(dateFormatter));
        textField.setColumns(mode.getDisplayColumns() + 1);
        textField.setFocusLostBehavior(JFormattedTextField.COMMIT);
    }

    public Date getDate() throws ParseException
    {
        textField.commitEdit();
        return (Date)textField.getValue();
    }

    public void setDate(Date date)
    {
        if (mode.isIntendedFor24HourRelativeFormat()) {
            if (date.getTime() < 0 || date.getTime() >= Constants.MILLISECONDS_PER_DAY) {
                throw new IllegalArgumentException("Date conflicts with 'mode.isIntendedFor24HourRelativeFormat()'");
            }
        }
        textField.setValue(date);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        textField = new javax.swing.JFormattedTextField();

        setLayout(new java.awt.BorderLayout());

        add(textField, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField textField;
    // End of variables declaration//GEN-END:variables

}
