/*
    Copyright (c) 2005, 2006, 2007, 2008, 2012 Paul Richards <paul.richards@gmail.com>

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted, provided that the above
    copyright notice and this permission notice appear in all copies.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

package pigeon.view;

import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import pigeon.model.Season;

/**
    Presents options for copying member and racepoint details from a previous season.
*/
final class NewSeasonDialog extends javax.swing.JPanel {

    private static final long serialVersionUID = 5040073490144704442L;

    /** Creates new form NewSeasonDialog */
    public NewSeasonDialog() {
        initComponents();
        updateComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        startFromScratchRadio = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        browseButton = new javax.swing.JButton();
        previousFileName = new javax.swing.JTextField();
        copyExistingRadio = new javax.swing.JRadioButton();

        setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        buttonGroup1.add(startFromScratchRadio);
        startFromScratchRadio.setSelected(true);
        startFromScratchRadio.setText("Start from scratch");
        startFromScratchRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        startFromScratchRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(startFromScratchRadio, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanel2, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        browseButton.setText("Browse ...");
        browseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                browseButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(browseButton, gridBagConstraints);

        previousFileName.setColumns(50);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(previousFileName, gridBagConstraints);

        buttonGroup1.add(copyExistingRadio);
        copyExistingRadio.setText("Copy members and racepoints from a preious season");
        copyExistingRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        copyExistingRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));
        copyExistingRadio.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                copyExistingRadioStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(copyExistingRadio, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanel1, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_browseButtonActionPerformed
    {//GEN-HEADEREND:event_browseButtonActionPerformed
        JFileChooser chooser = Utilities.createFileChooser();
        File selectedFile = new File(previousFileName.getText());
        if (selectedFile.exists()) {
            chooser.setSelectedFile(selectedFile);
        }
        int result = chooser.showOpenDialog(this);
        switch (result) {
            case JFileChooser.APPROVE_OPTION:
                File file = chooser.getSelectedFile();
                previousFileName.setText(file.getPath());
                break;
            case JFileChooser.CANCEL_OPTION:
                break;
            case JFileChooser.ERROR_OPTION:
            default:
                throw new IllegalStateException();
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void copyExistingRadioStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_copyExistingRadioStateChanged
    {//GEN-HEADEREND:event_copyExistingRadioStateChanged
        updateComponents();
    }//GEN-LAST:event_copyExistingRadioStateChanged

    private void updateComponents() {
        final boolean enabled = copyExistingRadio.isSelected();
        previousFileName.setEnabled(enabled);
        browseButton.setEnabled(enabled);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton copyExistingRadio;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField previousFileName;
    private javax.swing.JRadioButton startFromScratchRadio;
    // End of variables declaration//GEN-END:variables


    public static Season createNewSeason(Component parent) throws UserCancelledException, FileNotFoundException, IOException, ClassNotFoundException
    {
        NewSeasonDialog panel = new NewSeasonDialog();
        int result = JOptionPane.showOptionDialog(parent, panel, "New Season", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        Season season = Season.createEmpty();

        switch (result) {
            case JOptionPane.OK_OPTION:
                if (panel.copyExistingRadio.isSelected()) {
                    Season previousSeason = Utilities.loadSeasonFromFile(new File(panel.previousFileName.getText()));
                    season = season.repSetOrganization(previousSeason.getOrganization());
                }
                break;
            case JOptionPane.CANCEL_OPTION:
                throw new UserCancelledException();
            default:
                throw new IllegalArgumentException();
        }

        return season;
    }
}
