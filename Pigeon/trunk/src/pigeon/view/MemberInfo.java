/*
    Copyright (c) 2005, 2006, 2007, 2008, 2012 Paul Richards <paul.richards@gmail.com>

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted, provided that the above
    copyright notice and this permission notice appear in all copies.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

package pigeon.view;

import java.awt.Component;
import javax.swing.JOptionPane;
import pigeon.model.Member;
import pigeon.model.Organization;
import pigeon.model.ValidationException;

/**
    Edits basic info for members like name, etc.
*/
final class MemberInfo extends javax.swing.JPanel {

    private static final long serialVersionUID = 8280472583918302972L;

    private Member member;
    private final Organization organization;

    public MemberInfo(Member member, Organization organization, boolean editable, Configuration.Mode applicationMode) {
        this.member = member;
        this.organization = organization;
        initComponents();
        switch (applicationMode) {
            case FEDERATION:
                for (String c: Utilities.findClubNames(organization)) {
                    clubCombo.addItem(c);
                }
                clubCombo.setSelectedItem( member.getClub() );
                clubCombo.setEditable( editable );

                for (String s: Utilities.findSectionNames(organization)) {
                    sectionCombo.addItem(s);
                }
                sectionCombo.setSelectedItem( member.getSection() );
                sectionCombo.setEditable( editable );
                break;

            case CLUB:
                clubCombo.setSelectedItem( organization.getName() );
                clubLabel.setEnabled( false );
                clubCombo.setEnabled( false );
                sectionLabel.setEnabled( false );
                sectionCombo.setEnabled( false );
                break;
        }
        nameText.setText( member.getName() );
        nameText.setEditable( editable );
        addressText.setText( member.getAddress() );
        addressText.setEditable( editable );
        telephoneText.setText( member.getTelephone() );
        telephoneText.setEditable( editable );
        SHUNumberText.setText( member.getSHUNumber() );
        SHUNumberText.setEditable( editable );
    }

    private void updateMemberObject() throws ValidationException
    {
        if (clubCombo.isEnabled()) {
            member = member.repSetClub( clubCombo.getSelectedItem().toString() );
            member = member.repSetSection( sectionCombo.getSelectedItem().toString() );
        }
        member = member.repSetName( nameText.getText() );
        member = member.repSetAddress( addressText.getText() );
        member = member.repSetTelephone( telephoneText.getText() );
        member = member.repSetSHUNumber(SHUNumberText.getText());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        nameLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        addressLabel = new javax.swing.JLabel();
        addressScrollPane = new javax.swing.JScrollPane();
        addressText = new javax.swing.JTextArea();
        telephoneLabel = new javax.swing.JLabel();
        telephoneText = new javax.swing.JTextField();
        memberInformationLabel = new javax.swing.JLabel();
        SHUNumberLabel = new javax.swing.JLabel();
        SHUNumberText = new javax.swing.JTextField();
        clubLabel = new javax.swing.JLabel();
        sectionLabel = new javax.swing.JLabel();
        clubCombo = new javax.swing.JComboBox();
        sectionCombo = new javax.swing.JComboBox();

        setLayout(new java.awt.GridBagLayout());

        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        nameLabel.setText("Member Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(nameLabel, gridBagConstraints);

        nameText.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(nameText, gridBagConstraints);

        addressLabel.setText("Contact Address");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(addressLabel, gridBagConstraints);

        addressText.setRows(5);
        addressScrollPane.setViewportView(addressText);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(addressScrollPane, gridBagConstraints);

        telephoneLabel.setText("Telephone No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(telephoneLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(telephoneText, gridBagConstraints);

        memberInformationLabel.setText("Member Information");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(memberInformationLabel, gridBagConstraints);

        SHUNumberLabel.setText("SHU Registration No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(SHUNumberLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(SHUNumberText, gridBagConstraints);

        clubLabel.setText("Club");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(clubLabel, gridBagConstraints);

        sectionLabel.setText("Section");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(sectionLabel, gridBagConstraints);

        clubCombo.setEditable(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(clubCombo, gridBagConstraints);

        sectionCombo.setEditable(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(sectionCombo, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel SHUNumberLabel;
    private javax.swing.JTextField SHUNumberText;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JScrollPane addressScrollPane;
    private javax.swing.JTextArea addressText;
    private javax.swing.JComboBox clubCombo;
    private javax.swing.JLabel clubLabel;
    private javax.swing.JLabel memberInformationLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JComboBox sectionCombo;
    private javax.swing.JLabel sectionLabel;
    private javax.swing.JLabel telephoneLabel;
    private javax.swing.JTextField telephoneText;
    // End of variables declaration//GEN-END:variables

    public static Member editMember(
        Component parent,
        Member member,
        Organization organization,
        boolean newMember,
        Configuration.Mode applicationMode
    ) throws UserCancelledException
    {
        MemberInfo panel = new MemberInfo(member, organization, true, applicationMode);
        while (true) {
            Object[] options = { (newMember ? "Add" : "Ok"), "Cancel" };
            int result = JOptionPane.showOptionDialog(parent, panel, "Member Information", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
            if (result == 0) {
                try {
                    panel.updateMemberObject();
                    break;
                } catch (ValidationException e) {
                    e.displayErrorDialog(panel);
                }
            } else {
                result = JOptionPane.showConfirmDialog(parent, "Return to main window and discard these changes?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    throw new UserCancelledException();
                }
            }
        }
        return panel.member;
    }

    public static Member createMember(
        Component parent,
        Organization organization,
        Configuration.Mode applicationMode
    ) throws UserCancelledException
    {
        return editMember(parent, Member.createEmpty(), organization, true, applicationMode);
    }
}
