(define cons (quote (builtin-procedure cons)))
(define car (quote (builtin-procedure car)))
(define cdr (quote (builtin-procedure cdr)))
(define instance-id (quote (builtin-procedure instance-id)))
(define type-of (quote (builtin-procedure type-of)))
(define equal-number (quote (builtin-procedure equal-number)))
(define equal-symbol (quote (builtin-procedure equal-symbol)))
(define nil (quote ()))
(define false nil)
(define true (quote TRUE))
(define let (macro (a b c) (cons (cons (quote lambda) (cons (cons a nil) (cons c nil))) (cons b nil))))
(define first (lambda (x) (car x)))
(define second (lambda (x) (car (cdr x))))
(define is-equal-type (lambda (x y) (equal-symbol (type-of x) (type-of y))))
(define is-same-instance (lambda (x y) (equal-number (instance-id x) (instance-id y))))
(define is-number (lambda (x) (is-equal-type (quote 1) x)))
(define is-symbol (lambda (x) (is-equal-type (quote a) x)))
(define is-list (lambda (x) (is-equal-type (quote (1)) x)))
(define deep-equal (lambda (a b) (if a (if b (if (is-same-instance a b) true (if (is-equal-type a b) (if (is-number a) (equal-number a b) (if (is-symbol a) (equal-symbol a b) (if (is-list a) (if (deep-equal (car a) (car b)) (deep-equal (cdr a) (cdr b)) nil) (1)))) false)) false) (if b false true))))
(define a (quote (1 a (b 3))))
(define b (quote (1 a (b 3))))
(let a (quote (1 a (b 3))) (let b (quote (1 a (b 3))) (deep-equal a b)))
(quote (previous line should return TRUE))
()
